{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.parseRelativeUrl = parseRelativeUrl;\nconst DUMMY_BASE = new URL('http://n'); /**\n                                        * Parses path-relative urls (e.g. `/hello/world?foo=bar`). If url isn't path-relative\n                                        * (e.g. `./hello`) then at least base must be.\n                                        * Absolute urls are rejected.\n                                        */\nfunction parseRelativeUrl(url, base) {\n  const resolvedBase = base ? new URL(base, DUMMY_BASE) : DUMMY_BASE;\n  const {\n    pathname,\n    searchParams,\n    search,\n    hash,\n    href,\n    origin\n  } = new URL(url, resolvedBase);\n  if (origin !== DUMMY_BASE.origin) {\n    throw new Error('invariant: invalid relative URL');\n  }\n  return {\n    pathname,\n    searchParams,\n    search,\n    hash,\n    href: href.slice(DUMMY_BASE.origin.length)\n  };\n}","map":{"version":3,"sources":["../../../../../next-server/lib/router/utils/parse-relative-url.ts"],"names":["DUMMY_BASE","URL","parseRelativeUrl","url","base","resolvedBase","pathname","searchParams","search","hash","href","origin","Error","slice","length"],"mappings":";;;;AAAA,MAAMA,UAAU,GAAG,IAAIC,GAAJ,CAAQ,UAAR,CAAnB,CAEA;;;;;AAKO,SAASC,gBAAT,CAA0BC,GAA1B,EAAuCC,IAAvC,EAAsD;EAC3D,MAAMC,YAAY,GAAGD,IAAI,GAAG,IAAIH,GAAJ,CAAQG,IAAR,EAAcJ,UAAd,CAAH,GAA+BA,UAAxD;EACA,MAAM;IAAEM,QAAF;IAAYC,YAAZ;IAA0BC,MAA1B;IAAkCC,IAAlC;IAAwCC,IAAxC;IAA8CC;EAA9C,CAAA,GAAyD,IAAIV,GAAJ,CAC7DE,GAD6D,EAE7DE,YAF6D,CAA/D;EAIA,IAAIM,MAAM,KAAKX,UAAU,CAACW,MAA1B,EAAkC;IAChC,MAAM,IAAIC,KAAJ,CAAU,iCAAV,CAAN;EACD;EACD,OAAO;IACLN,QADK;IAELC,YAFK;IAGLC,MAHK;IAILC,IAJK;IAKLC,IAAI,EAAEA,IAAI,CAACG,KAALH,CAAWV,UAAU,CAACW,MAAXX,CAAkBc,MAA7BJ;EALD,CAAP;AAOD","sourcesContent":["const DUMMY_BASE = new URL('http://n')\n\n/**\n * Parses path-relative urls (e.g. `/hello/world?foo=bar`). If url isn't path-relative\n * (e.g. `./hello`) then at least base must be.\n * Absolute urls are rejected.\n */\nexport function parseRelativeUrl(url: string, base?: string) {\n  const resolvedBase = base ? new URL(base, DUMMY_BASE) : DUMMY_BASE\n  const { pathname, searchParams, search, hash, href, origin } = new URL(\n    url,\n    resolvedBase\n  )\n  if (origin !== DUMMY_BASE.origin) {\n    throw new Error('invariant: invalid relative URL')\n  }\n  return {\n    pathname,\n    searchParams,\n    search,\n    hash,\n    href: href.slice(DUMMY_BASE.origin.length),\n  }\n}\n"]},"metadata":{},"sourceType":"script"}