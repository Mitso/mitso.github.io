{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.parseRelativeUrl = parseRelativeUrl;\nvar DUMMY_BASE = new URL('http://n'); /**\n                                      * Parses path-relative urls (e.g. `/hello/world?foo=bar`). If url isn't path-relative\n                                      * (e.g. `./hello`) then at least base must be.\n                                      * Absolute urls are rejected.\n                                      */\nfunction parseRelativeUrl(url, base) {\n  var resolvedBase = base ? new URL(base, DUMMY_BASE) : DUMMY_BASE;\n  var _URL = new URL(url, resolvedBase),\n    pathname = _URL.pathname,\n    searchParams = _URL.searchParams,\n    search = _URL.search,\n    hash = _URL.hash,\n    href = _URL.href,\n    origin = _URL.origin;\n  if (origin !== DUMMY_BASE.origin) {\n    throw new Error('invariant: invalid relative URL');\n  }\n  return {\n    pathname: pathname,\n    searchParams: searchParams,\n    search: search,\n    hash: hash,\n    href: href.slice(DUMMY_BASE.origin.length)\n  };\n}","map":{"version":3,"sources":["../../../../../next-server/lib/router/utils/parse-relative-url.ts"],"names":["DUMMY_BASE","URL","parseRelativeUrl","url","base","resolvedBase","pathname","searchParams","search","hash","href","origin","Error","slice","length"],"mappings":";;;;AAAA,IAAMA,UAAU,GAAG,IAAIC,GAAJ,CAAQ,UAAR,CAAnB,CAEA;;;;;AAKO,SAASC,gBAAT,CAA0BC,GAA1B,EAAuCC,IAAvC,EAAsD;EAC3D,IAAMC,YAAY,GAAGD,IAAI,GAAG,IAAIH,GAAJ,CAAQG,IAAR,EAAcJ,UAAd,CAAH,GAA+BA,UAAxD;EACA,IAAA,IAAA,GAA+D,IAAIC,GAAJ,CAC7DE,GAD6D,EAE7DE,YAF6D,CAA/D;IAAQC,QAAF,GAAA,IAAA,CAAEA,QAAF;IAAYC,YAAZ,GAAA,IAAA,CAAYA,YAAZ;IAA0BC,MAA1B,GAAA,IAAA,CAA0BA,MAA1B;IAAkCC,IAAlC,GAAA,IAAA,CAAkCA,IAAlC;IAAwCC,IAAxC,GAAA,IAAA,CAAwCA,IAAxC;IAA8CC,MAA9C,GAAA,IAAA,CAA8CA,MAA9C;EAIN,IAAIA,MAAM,KAAKX,UAAU,CAACW,MAA1B,EAAkC;IAChC,MAAM,IAAIC,KAAJ,CAAU,iCAAV,CAAN;EACD;EACD,OAAO;IACLN,QADK,EACLA,QADK;IAELC,YAFK,EAELA,YAFK;IAGLC,MAHK,EAGLA,MAHK;IAILC,IAJK,EAILA,IAJK;IAKLC,IAAI,EAAEA,IAAI,CAACG,KAALH,CAAWV,UAAU,CAACW,MAAXX,CAAkBc,MAA7BJ;EALD,CAAP;AAOD","sourcesContent":["const DUMMY_BASE = new URL('http://n')\n\n/**\n * Parses path-relative urls (e.g. `/hello/world?foo=bar`). If url isn't path-relative\n * (e.g. `./hello`) then at least base must be.\n * Absolute urls are rejected.\n */\nexport function parseRelativeUrl(url: string, base?: string) {\n  const resolvedBase = base ? new URL(base, DUMMY_BASE) : DUMMY_BASE\n  const { pathname, searchParams, search, hash, href, origin } = new URL(\n    url,\n    resolvedBase\n  )\n  if (origin !== DUMMY_BASE.origin) {\n    throw new Error('invariant: invalid relative URL')\n  }\n  return {\n    pathname,\n    searchParams,\n    search,\n    hash,\n    href: href.slice(DUMMY_BASE.origin.length),\n  }\n}\n"]},"metadata":{},"sourceType":"script"}